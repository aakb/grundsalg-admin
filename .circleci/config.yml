# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: php:7.1-apache-browsers
        environment:
          APP_ENV: circleci

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/mysql:latest
        environment:
          - MYSQL_ROOT_PASSWORD=circleci
          - MYSQL_USER=circleci
          - MYSQL_PASSWORD=circleci
          - MYSQL_DATABASE=circle_test

    working_directory: /var/www/html

    steps:
      - run:
          name: Apt-get update
          command: apt-get update && apt-get install -y zlib* wget

      - run:
          # Prevent race conditions by waiting for services with Dockerize
          # https://discuss.circleci.com/t/prevent-race-conditions-by-waiting-for-services-with-dockerize/11215
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0

      - run:
          name: Install PHP extensions - zip
          command: docker-php-ext-install zip && docker-php-ext-enable zip

      - run:
          name: Install PHP extensions - pdo_mysql
          command: docker-php-ext-install pdo_mysql && docker-php-ext-enable pdo_mysql

      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: Install Composer
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php -r "if (hash_file('SHA384', 'composer-setup.php') === trim(file_get_contents('https://composer.github.io/installer.sig'))) { echo 'Installer verified'; } else { echo 'Installer invalid'; unlink('composer-setup.php'); } echo PHP_EOL;"
            php composer-setup.php
            php -r "unlink('composer-setup.php');"

      - run: php composer.phar install --no-interaction

      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}

      # run tests!
      - run: vendor/bin/behat --profile=circleci